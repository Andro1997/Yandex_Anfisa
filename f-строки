Преобразование типов из числа в строку f-строки проделывают автоматически:

one_hundred = 100
rubles = 'рублей'
friends = 'друзей'
print(f'Не имей {one_hundred} {rubles}, а имей {one_hundred} {friends}.')

# Это проще и понятнее, чем написать
# print('Не имей ' + str(one_hundred) + ' ' + rubles + ', а имей ' + str(one_hundred) +' ' + friends + '.')

Не имей 100 рублей, а имей 100 друзей.
___________________________________________________________________________________________________________________________________________

В f-строки можно подставлять не только переменные, но и результаты вычислений. Например, арифметические операции:

one_hundred = 100
five_hundred = 500
print(f'{one_hundred} + {five_hundred} = {one_hundred + five_hundred}')
    
one_hundred = 'сто'
five_hundred = 'пятьсот'
print(f'{one_hundred} + {five_hundred} = {one_hundred + five_hundred}')

100 + 500 = 600
сто + пятьсот = стопятьсот


russian_alphabet = ['а', ................ 'я']
    
print(f'"{russian_alphabet[-1]}" - последняя буква в алфавите.')

"я" - последняя буква в алфавите.
______________________________________________________________________________________________________________________________________
DICT
А также к элементам словаря по ключу:

favorite_songs = {
    'Тополиный пух': 'Иванушки international',
    'Город золотой': 'Аквариум',
    'Звезда по имени Солнце': 'Кино'
}

song = 'Город золотой'

print(f'"{song}" - одна из известных пеcен группы "{favorite_songs[song]}".')

"Город золотой" - одна из известных пеcен группы "Аквариум".




Лучше придерживаться общего правила: 
f-строки используются только для форматирования вывода, а вычислять все выражения надо вне их. 
И вообще, не стоит экономить на количестве строчек кода, принося в жертву его читаемость.
