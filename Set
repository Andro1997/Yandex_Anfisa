Тип set очень похож на список, но есть два важных отличия:
1) Элементы в сете не повторяются, он избегает повторов, автоматически не вписывая их;
2) Не гарантируется, что при выводе элементов на экран будет соблюден какой-то определенный порядок.
Любой список можно превратить в сет простым вызовом функции set()
__________________________________________________________________________________________________________

bands = ['Пикник', 'Ария', 'Блестящие', 'Блестящие']
# получаем сет unique_band_names (с англ. «уникальные названия групп»)
unique_band_names = set(bands)

'Пикник', 'Ария', 'Блестящие'
___________________________________________________________________________________________________________
По элементам сета тоже можно пройти циклом, например вот так:
for band in unique_band_names:
    print('Доктор, я не могу больше слушать группу ' + band)
    
____________________________________________________________________________________________________________
Доктор, я не могу больше слушать группу Пикник
Доктор, я не могу больше слушать группу Блестящие
Доктор, я не могу больше слушать группу Ария

________________________________________________________________________________________________________________________________________

А вот что получится, если так превращать во множество строку:
s = set('сервер')
print(s)
{'в', 'е', 'с', 'р'}

________________________________________________________________________________________________________________________________________
add()
Если вы хотите добавить в множество новый элемент, примените к сету метод add() (англ. add, «добавить»).
s.add('а') # теперь множество s выглядит как {'в', 'е', 'с', 'р', 'а'}
________________________________________________________________________________________________________________________________________
union()
Для объединения двух множеств к первому применяют метод union() (англ. union, «объединение»), передавая ему второе множество как аргумент:
songs1 = {'Три белых коня', 'Happy new year', 'Снежинка'}
songs2 = {'Last christmas', 'Снежинка', 'Happy new year'}
    
print(songs1.union(songs2))
{'Три белых коня', 'Снежинка', 'Last christmas', 'Happy new year'}

________________________________________________________________________________________________________________________________________

difference()

Если же вам хочется получить новые впечатления и узнать, какие песни есть в плейлисте вашего друга, а в вашем нет — поможет метод difference() (англ. difference «разница, разность»). Его вызов записывается как set1.difference(set2) и возвращает новое множество, которое содержит только те элементы, которые присутствуют в set1, но отcутствуют в set2.
my_songs = {'Наше лето', 'Голубой вагон', 'Облака'}
friends_songs = {'Голубой вагон', 'Облака', 'Yesterday', 'Наше лето'}
    
print(friends_songs.difference(my_songs))
{'Yesterday'}
_______________________________________________________________________________________________________________________________________

intersection()

Можно также найти пересечение двух множеств, то есть элементы, которые есть в обоих. Вот, например, списки фильмов, просмотренных и вами, и вашей подругой. Надо знать, какие фильмы можно обсуждать, не боясь спойлеров. Для этого используется метод intersection() (англ. intersection «пересечение»):
my_films = {'Форсаж', 'Достучаться до небес', 'Мстители: война бесконечности'}
friends_films = {'Мстители: война бесконечности', 'Форсаж', 'Матрица'}
    
print(my_films.intersection(friends_films))
{'Мстители: война бесконечности', 'Форсаж'}
