Исключения хороши тем, что умеют обрабатывать ошибки во время выполнения программы, не требуя вмешательства пользователя. 
Достаточно дать распоряжение на исключительные случаи. 
Для этого существует конструкция try - except (англ. try, «пробовать»; except, «за исключением»):

try:
    # Здесь написан код.
    # Это код может содержать ошибки времени выполнения.
    # Разработчики говорят, что код может "выбросить" исключение.
except TypeError1:
    # Здесь описываем, что следует делать,
    # если будет "выброшено" исключение типа TypeError1.
except TypeError2:
      # А здесь разработчики говорят, как быть, если мы
    # "ловим" или "перехватываем" исключения типа TypeError2.
    
    Рассмотрим применение конструкции try - except на примере делёжки яблок между друзьями разных пользователей.
    
    # вот функция, которая может выбросить исключение
def calc_share(apples, friends):
    # от строки откусываем число и приводим к типу int
    friends_number = int(friends.split()[0])
    return apples / friends_number


# есть 17 яблок
apples = 17

# будем считать, сколько достанется каждому другу
# вызовем функцию calc_share() для разных наших знакомых,
# с различным числом друзей

for friends in ['7 друзей', '2 друга', '0 друзей', 'один враг']:
    try:
        print('Каждому достанется по', calc_share(apples, friends), 'яблока')
    except ZeroDivisionError:
        print('На ноль делить нельзя.')
    except ValueError:
        print(f'Из строки "{friends}" не получилось достать число.')
        
Каждому достанется по 2.4285714285714284 яблока
Каждому достанется по 8.5 яблока
На ноль делить нельзя.
Из строки "один враг" не получилось достать число.
